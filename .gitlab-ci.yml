# LTC GitLab CI/CD Pipeline

# General Steps
# 1. Gather info
# 2. Build Image
# 3. Generate deployment package
# 4. Deploy

# Common scripts
include:
  - project: 'deployments/build-scripts'
    file: '.gitlab-ci-template.yml'

stages:
  - gather info
  - build
  - deploy
  - cleanup

# Determine git tag
get environment:
  stage: gather info
  extends: .get_version

# Build image and push to project registry
build image:
  stage: build
  extends:
    - .build_image
    - .feature_branch_rules

# Deploy package
deploy review:
  stage: deploy
  variables:
    BUILD_ENV: dev
  extends:
    - .deploy_review
    - .set_gitlab_environment
    - .feature_branch_rules
  needs:
  - job: get environment
    artifacts: true
  - job: build image


# build_latest:                         # Build image with Kaniko
#   stage: build
#   variables:
#     BUILD_ENV: staging
#   extends:
#     - .build_image
#     - .main_branch_rules

# deploy_latest:                        # Deploy `latest` image to staging cluster
#   stage: deploy
#   extends: 
#     - .main_branch_rules
#   variables:
#     BUILD_ENV: staging
#   secrets:
#     TLS_CRT:
#       vault: ssl-certificates/star-dev-ltc-bcit-ca-bundle.crt.base64@ltc-infrastructure
#       file: false
#     TLS_KEY:
#       vault: ssl-certificates/star-dev-ltc-bcit-ca.key.base64@ltc-infrastructure
#       file: false
#   script:
#     - !reference [.set_deploy_envs, script]                   # set cluster env
#     - !reference [.replace_namespace, script]         # add namespace annotations to ensure it's in the default Rancher project
#     - !reference [.patch_deployment, script]        # add annotations about build to deployment
#     - !reference [.kustomize_image, script]           # patch deployment to pull latest commit image
#     - !reference [.add_common_annotations, script]    # link deployment to GitLab Environment/Operations dashboards
#     - !reference [.create_tls_secret, script]         # create TLS secret
#     - !reference [.patch_ingress, script]             # replace ingress with rewrite-targets, sub-paths
#     - !reference [.verify_kustomization, script]      # validate kustomization
#     - "kubectl kustomize deploy/overlays/$BUILD_ENV \
#         | kubectl apply -f -"                         # apply kustomized deployment
#   environment:
#     name: staging
#     url: https://$STAGING_HOST/$CI_PROJECT_NAME
#     kubernetes:
#       namespace: $PROD_NAMESPACE      # update to '$CI_PROJECT_NAME' if projects are independent


# semver_tag:                           # Creates a semantic-version tag that is applied to the release branch
#   stage: analyze_for_tagging
#   extends: 
#     - .semver_tag_rules
#     - .semantic_release
#   secrets:
#     GITLAB_TOKEN:
#       vault: dependabot-$CI_PROJECT_NAME/token@tokens
#       file: false
#   script:
#     - "semantic-release \
#         --branches release \
#         --repository-url $CI_PROJECT_URL \
#         --plugins '@semantic-release/commit-analyzer, \
#           @semantic-release/release-notes-generator, \
#           @semantic-release/gitlab'"


# build_stable:                         # Build image with Kaniko
#   stage: build
#   variables:
#     BUILD_ENV: prod
#   extends:
#     - .build_image
#     - .release_branch_rules


# deploy_production:                    # Deploy `stable` image to production cluster
#   stage: deploy
#   extends: 
#     - .release_branch_rules
#   variables:
#     BUILD_ENV: prod
#   secrets:
#     TLS_CRT:
#       vault: ssl-certificates/star-dev-ltc-bcit-ca-bundle.crt.base64@ltc-infrastructure
#       file: false
#     TLS_KEY:
#       vault: ssl-certificates/star-dev-ltc-bcit-ca.key.base64@ltc-infrastructure
#       file: false
#   script:
#     - !reference [.set_deploy_envs, script]                   # set cluster env
#     - !reference [.replace_namespace, script]         # add namespace annotations to ensure it's in the default Rancher project
#     - !reference [.patch_deployment, script]        # add annotations about build to deployment
#     - !reference [.kustomize_image, script]           # patch deployment to pull latest commit image
#     - !reference [.add_common_annotations, script]    # link deployment to GitLab Environment/Operations dashboards
#     - !reference [.create_tls_secret, script]         # create TLS secret
#     - !reference [.patch_ingress, script]             # replace ingress with rewrite-targets, sub-paths
#     - !reference [.verify_kustomization, script]      # validate kustomization
#     - "kubectl kustomize deploy/overlays/$BUILD_ENV \
#         | kubectl apply -f -"                         # apply kustomized deployment
#   environment:
#     name: production
#     url: https://$PROD_HOST/$CI_PROJECT_NAME
#     kubernetes:
#       namespace: $PROD_NAMESPACE      # update to '$CI_PROJECT_NAME' if projects are independent


# Removes deployment (and all assets in the namespace)
stop_review:                          # Stop review environment
  stage: cleanup
  extends:
    - .stop_review
    - .feature_branch_rules


# Pipeline variables
variables:                  # other global variables are set in GitLab Admin: https://issues.ltc.bcit.ca/admin/application_settings/ci_cd
  CLUSTER_NAME: "dev-cp"    # options: dev-cp, dev-vsm
  # PROD_NAMESPACE: "qcon"    # combine apps into one namespace if following microservice pattern; otherwise, set to ""
  DEPLOYMENT_PACKAGE_URL: https://gitlab-ci-token:$CI_JOB_TOKEN@$CI_SERVER_HOST/deployments/$CI_PROJECT_NAME.git/$BUILD_ENV
  VAULT_AUTH_ROLE: "dependabot-$CI_PROJECT_NAME"    # Standard policies: [default, jwt, read-tokens, read-apps, read-ssl-certificates]
  GIT_FETCH_EXTRA_FLAGS: "--tags"
  PIPELINE_DEBUG: "true"
  CI_DEBUG_TRACE: "false"
  KUBE_CONTEXT: "ltc-infrastructure/gitlab-kubernetes-agent:gitlab-kubernetes-agent"
