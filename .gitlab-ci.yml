# Default LTC GitLab CI/CD Pipeline
#
## Requirements
#   - run `project-init.sh` to generate a GitLab Project Access Token and configure Vault
#   - `Dockerfile` in project root
#
## General Pipeline Steps
#   1. Gather info
#   2. Build Image
#   3. Trigger deployment pipeline

stages:
  - get info
  - publish
  - cleanup


## Determine if there are existing git tags or a new tag is required
get info:
  stage: get info
  extends:
    - .get_gitlab_token
    - .get_tags


## Build image and push to project registry
build image:
  stage: publish
  extends:
    - .build_image


## Deploy feat/fix branch package to dev cluster for review
deploy review:
  stage: publish
  variables:
    TARGET_ENV: dev
  extends:
    - .deploy_review
    - .deploy_review_environment
    - .deploy_review_rules


## Removes dev cluster deployment (and all assets in the branch namespace)
stop review:
  stage: cleanup
  extends:
    - .undeploy_review
    - .undeploy_review_environment
    - .undeploy_review_rules


## Deploy staging/production packages (must have a deployment package)
# - triggers pipelines in "Deployments/{projectName}" project
deploy to staging:
  stage: publish
  variables:
    TARGET_ENV: staging
  extends:
    - .deploy
    - .deploy_staging_rules
  environment:
    name: staging
    url: https://$STAGING_HOST/$CI_PROJECT_NAME
  tags:
    - staging


deploy to production:
  stage: publish
  variables:
    TARGET_ENV: production
  extends:
    - .deploy
    - .deploy_prod_rules
  environment:
    name: production
    url: https://${PROD_HOST}/${CI_PROJECT_NAME}
  tags:
    - production


#
#
#
## ---------- Pipeline configuration ----------
#
#
#
variables:                    # other global variables are set in GitLab Admin
  CLUSTER_NAME: "dev-cp"      # options: dev-cp, dev-vsm
  GENERIC_DEPLOYMENT: ""
  #
  #   - if GENERIC_DEPLOYMENT="anything but true", the pipeline expects a deployment package
  #     to exist in the "Deployments" GitLab group. Create a deployment package following the
  #     guide in "Deployments/CI Config".
  #
  #   - also see https://infrastructure-documentation.dev.ltc.bcit.ca/ for additional info.
  #
  DEPLOYMENT_PACKAGE_PROJECT_ID: 345
  # COMMON_NAMESPACE: "qcon"    # combine apps into one namespace; otherwise, set to ""
#
#
#
## ---------- It's generally bad to change anything below here ----------
#
#
#
## Other common pipeline variables
  VAULT_AUTH_ROLE: "dependabot-$CI_PROJECT_NAME"
  GIT_FETCH_EXTRA_FLAGS: "--tags"
  PIPELINE_DEBUG: "true"

## Include common scripts
include:
  - project: 'deployments/ci-config'
    file: 
      - '.get-info.yml'
      - '.build.yml'
      - '.hydrate-deploy.yml'
      - '.rules.yml'
      - '.debug.yml'

## Specify which runner should pick up pipeline jobs
default:
  tags:
    - ${CLUSTER_NAME}

## Configure merge request pipelines
workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == "push"'
      when: never
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH || $CI_COMMIT_TAG'