# Default LTC GitLab CI/CD Pipeline
#
## Requirements
#   - run `project-init.sh` to generate GitLab Project Access Token and configure Vault
#   - `Dockerfile` in project root
#
## General Pipeline Steps
#   1. Gather info
#   2. Build Image
#   3. Hydrate deployment package
#   4. Deploy package

stages:
  - analyze for new tag
  - gather existing tag info
  - build
  - deploy
  - cleanup


## Determine if a new git tag is required
semver tag:
  stage: analyze for new tag
  extends: 
    - .semantic_release
    - .semantic_release_rules
  # Retrieve token from Vault
  secrets:
    GITLAB_TOKEN:
      vault: dependabot-$CI_PROJECT_NAME/token@tokens
      file: false


## Determine if there are existing git tags
get tags:
  stage: gather existing tag info
  extends: .get_tags


## Build feat/fix branch image and push to project registry
build image:
  stage: build
  extends:
    - .build_image


## Deploy feat/fix branch package
deploy review package:
  stage: deploy
  extends:
    - .deploy_review_package
    - .deploy_review_package_rules
    - .deploy_review_environment


## Removes deployment (and all assets in the namespace)
stop review:
  stage: cleanup
  extends:
    - .undeploy_review
    - .undeploy_review_rules


## Deploy latest image (staging)
# - trigger staging pipeline in deployments/{projectName}/staging
  # tags:
  #   - staging
# deploy staging:
#   image: curlimages/curl:latest
#   stage: deploy
#   needs:
#     - job: build latest image
#       artifacts: true
#   variables:
#     MANIFEST_PROJECT_ID: 30770380
#     TARGET_ENVIRONMENT: staging
#   script:
#   - printenv
#   - 'curl --fail --request POST --form token=${CI_JOB_TOKEN} --form ref=main --form "variables[IMAGE_REF]=${IMAGE_REF}" --form "variables[TARGET_ENVIRONMENT]=${TARGET_ENVIRONMENT}" "${CI_API_V4_URL}/projects/${MANIFEST_PROJECT_ID}/trigger/pipeline"'
#   environment:
#     name: staging


## Deploy stable image (production)
# - trigger production pipeline that:
#   - unpacks trigger variables (CI_JOB_TOKEN, branch ref, image ref, target environment)
#     eg. --form token=${CI_JOB_TOKEN} --form ref=main --form "variables[IMAGE_REF]=${IMAGE_REF}" --form "variables[TARGET_ENVIRONMENT]=${TARGET_ENVIRONMENT}" "${CI_API_V4_URL}/projects/${MANIFEST_PROJECT_ID}/trigger/pipeline"'
#   - hydrates manifests
#   - commits to registry (at `/releases` path)
  # rules:
  #   - if: $CI_COMMIT_TAG
  # tags:
  #   - production
  
deploy:production:
  image: curlimages/curl:latest
  stage: deploy
  variables:
    TARGET_ENVIRONMENT: production
  script:
  - echo "production deploy"
  # - 'curl --fail --request POST --form token=${CI_JOB_TOKEN} --form ref=main --form "variables[IMAGE_REF]=${IMAGE_REF}" --form "variables[TARGET_ENVIRONMENT]=${TARGET_ENVIRONMENT}" "${CI_API_V4_URL}/projects/${MANIFEST_PROJECT_ID}/trigger/pipeline"'
  environment:
    name: production
  rules:
    - if: '$CI_COMMIT_TAG'
  tags:
    - production


#
#
#
## ---------- Pipeline configuration ----------
#
#
#
variables:                    # other global variables are set in GitLab Admin: https://issues.ltc.bcit.ca/admin/application_settings/ci_cd
  CLUSTER_NAME: "dev-cp"      # options: dev-cp, dev-vsm
  # PROD_NAMESPACE: "qcon"    # combine apps into one namespace if following microservice pattern; otherwise, set to ""
  GENERIC_DEPLOYMENT: ""  # options: true, anything else!
  #
  #   - if GENERIC_DEPLOYMENT="*", the pipeline expects a deployment package to exist. Create a deployment package and
  #       configure the pipeline with the package version.
  #
  #   - see https://infrastructure-documentation.dev.ltc.bcit.ca/ for info.
  #
  DEPLOYMENT_PACKAGE_VERSION: "@v0.3"
  DEPLOYMENT_PACKAGE_PROJECT_ID: 338
#
#
#
## ---------- It's generally bad to change anything below here ----------
#
#
#
## Other common pipeline variables
  VAULT_AUTH_ROLE: "dependabot-$CI_PROJECT_NAME"
  GIT_FETCH_EXTRA_FLAGS: "--tags"
  PIPELINE_DEBUG: "true"
  KUBE_CONTEXT: "ltc-infrastructure/gitlab-kubernetes-agent:gitlab-kubernetes-agent"

## Include common scripts
include:
  - project: 'deployments/ci-config'
    file: 
      - '.build.yml'
      - '.deploy.yml'
      - '.get-tags.yml'
      - '.rules.yml'
      - '.semver-tag.yml'

## Specify which runner should pick up pipeline jobs
default:
  tags:
    - ${CLUSTER_NAME}

## Configure merge request pipelines
workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == "push"'
      when: never
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH || $CI_COMMIT_TAG'