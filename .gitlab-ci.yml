# Default LTC GitLab CI/CD Pipeline
#
## Requirements
#   - run `project-init.sh` to generate GitLab Project Access Token and configure Vault
#   - `Dockerfile` in project root
#
## General Pipeline Steps
#   1. Gather info
#   2. Build Image
#   3. Hydrate deployment package
#   4. Deploy package

stages:
  - get tags
  - review
  - build
  - deploy
  - cleanup


## Determine if there are existing git tags or a new tag is required
get tags:
  stage: get tags
  extends:
    - .get_tags
    - .get_gitlab_token


## Build image and push to project registry
build image:
  stage: review
  extends:
    - .build_image


## Deploy feat/fix branch package
deploy review:
  stage: review
  variables:
    TARGET_ENV: dev
  secrets:
    CRT_PEM:
      vault: ssl-certificates/star-dev-ltc-bcit-ca-bundle.crt.base64@ltc-infrastructure
      # file: false
    KEY_PEM:
      vault: ssl-certificates/star-dev-ltc-bcit-ca.key.base64@ltc-infrastructure
      # file: false
  extends:
    - .deploy_package
    - .deploy_review_environment
    - .deploy_review_rules
  before_script:
    - kubectl config get-contexts
    - kubectl config use-context ltc-infrastructure/gitlab-kubernetes-agent:dev-cp-ltc-infrastructure
  after_script:
    - |
      pwd
      ls -laht
      mkdir overlays/$TARGET_ENV/secrets
      mkdir overlays/$TARGET_ENV/secrets
      echo "$CRT_PEM" | base64 --decode > overlays/$TARGET_ENV/crt.pem
      echo "$KEY_PEM" | base64 --decode > overlays/$TARGET_ENV/key.pem

      echo -e "\nData files for TLS secret generation created successfully"


## Removes deployment (and all assets in the namespace)
stop review:
  stage: cleanup
  extends:
    - .undeploy
    - .undeploy_rules


## Deploy latest image (staging)
# - trigger staging pipeline in deployments/{projectName}/staging
deploy to staging:
  image: curlimages/curl:latest
  stage: deploy
  variables:
    TARGET_ENV: staging
  secrets:
    CRT_PEM:
      vault: ssl-certificates/star-dev-ltc-bcit-ca-bundle.crt.base64@ltc-infrastructure
      # file: false
    KEY_PEM:
      vault: ssl-certificates/star-dev-ltc-bcit-ca.key.base64@ltc-infrastructure
      # file: false
  extends:
    - .deploy_staging_rules
  script:
  - echo "Starting deploy to staging"
  - "curl \
      --fail \
      --request POST \
      --form token=${CI_JOB_TOKEN} \
      --form ref=main \
      --form \"variables[VERSION]=${GIT_TAG}\" \
      --form \"variables[TAG]=${IMAGE_TAG}\" \
      --form \"variables[TEST]=SOMETHING2\" \
      \"${CI_API_V4_URL}/projects/${DEPLOYMENT_PACKAGE_PROJECT_ID}/trigger/pipeline\""
  environment:
    name: staging
    url: https://$STAGING_HOST/$CI_PROJECT_NAME
  tags:
    - staging

## Deploy stable image (production)
# - trigger production pipeline that:
#   - unpacks trigger variables (CI_JOB_TOKEN, branch ref, image ref, target environment)
#   - hydrates manifests
#   - commits to registry (at `/releases` path)  
# deploy to production:
#   image: curlimages/curl:latest
#   stage: deploy
#   variables:
#     TARGET_ENVIRONMENT: production
#   extends:
#     - .deploy_prod_rules
#   script:
#   - echo "Starting deploy to production"
#   - "curl \
#       --fail \
#       --request POST \
#       --form token=${CI_JOB_TOKEN} \
#       --form ref=${CI_COMMIT_BRANCH} \
#       --form \"variables[VERSION]=${GIT_TAG}\" \
#       --form \"variables[TAG]=${IMAGE_TAG}\" \
#       --form \"variables[IMAGE]=${CI_REGISTRY_IMAGE}\" \
#       \"${CI_API_V4_URL}/projects/${DEPLOYMENT_PACKAGE_PROJECT_ID}/trigger/pipeline\""
#   environment:
#     name: production
#     url: https://${PROD_HOST}/${CI_PROJECT_NAME}
#   tags:
#     - production

#
#
#
## ---------- Pipeline configuration ----------
#
#
#
variables:                    # other global variables are set in GitLab Admin: https://issues.ltc.bcit.ca/admin/application_settings/ci_cd
  CLUSTER_NAME: "dev-cp"      # options: dev-cp, dev-vsm
  DEPLOYMENT_HOST: ${CI_PROJECT_NAME}.${CLUSTER_NAME}.${DEV_HOST}
  # PROD_NAMESPACE: "qcon"    # combine apps into one namespace if following microservice pattern; otherwise, set to ""
  GENERIC_DEPLOYMENT: ""  # options: true, anything else!
  #
  #   - if GENERIC_DEPLOYMENT="anything but true", the pipeline expects a deployment package to exist. Create a deployment package and
  #       configure the pipeline with the package version.
  #
  #   - see https://infrastructure-documentation.dev.ltc.bcit.ca/ for info.
  #
  DEPLOYMENT_PACKAGE_VERSION: "v0.6"
  DEPLOYMENT_PACKAGE_PROJECT_ID: 345
#
#
#
## ---------- It's generally bad to change anything below here ----------
#
#
#
## Other common pipeline variables
  VAULT_AUTH_ROLE: "dependabot-$CI_PROJECT_NAME"
  GIT_FETCH_EXTRA_FLAGS: "--tags"
  PIPELINE_DEBUG: "true"
  # KUBE_CONTEXT: "ltc-infrastructure/gitlab-kubernetes-agent:dev-cp-ltc-infrastructure"

## Include common scripts
include:
  - project: 'deployments/ci-config'
    file: 
      - '.build.yml'
      - '.deploy.yml'
      - '.get-tags.yml'
      - '.rules.yml'
      - '.utilities.yml'

## Specify which runner should pick up pipeline jobs
default:
  tags:
    - ${CLUSTER_NAME}

## Configure merge request pipelines
workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == "push"'
      when: never
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH || $CI_COMMIT_TAG'