# LTC GitLab CI/CD Source Project Pipeline
#
## Requirements
#   - this file
#   - a working `Dockerfile`
#   - a deployment package (see https://infrastructure-documentation.ltc.bcit.ca/)
#
## General Pipeline Steps
#   1. Gather info
#   2. Build image
#   3. Deploy to a cluster
#     - development branches  => https://review--{branchName}--{projectName}.ltc.bcit.ca/ => review
#     - main branch           => https://latest--{projectName}.ltc.bcit.ca/               => latest
#     - public endpoint       => https://{projectName}.ltc.bcit.ca/                       => stable

stages:
  - get info
  - test
  - publish
  - cleanup

## Project initialization
#   - a project access token is required; if it doesn't exist it is created on the first run
# project init:
#   stage: get info
#   extends:
#     - ".project_init"

## Are there existing git tags? Is a new tag required?
get info:
  stage: get info
  extends:
    - ".get_info"

## Build image and push to project registry
build image:
  stage: publish
  extends:
    - ".build_image"
    - ".build_image_rules"

# Deploy to a development branch for review
#   - uses a deployment package with a `review` overlay
deploy review:
  stage: publish
  variables:
    TARGET_ENV: review
  extends:
    - ".deploy_review"
    - ".deploy_review_rules"

## Deploy latest/stable
#   - must have a deployment package with `latest` and `stable` overlays
#   - based on semver tagging

## Removes dev branch review (and all assets in the review branch namespace)
stop review:
  stage: cleanup
  variables:
    TARGET_ENV: review
  extends:
    - ".undeploy_review"
    - ".undeploy_review_rules"

#
## ---------- Pipeline configuration ----------
#
variables:
  #
  # other global variables are set in GitLab Admin
  #
  # GENERIC_DEPLOYMENT: "true"
  #
  #   - if GENERIC_DEPLOYMENT is set to anything but "true", the pipeline expects this
  #     project to have a deployment package
  #   - create a deployment package following the guide at https://infrastructure-documentation.ltc.bcit.ca/.
  #
  # Set DEPLOY_PKG_INIT=true to create an initial project deployment package. Then unset GENERIC_DEPLOYMENT and
  # add the deployment package project ID below
  #
  # DEPLOY_PKG_INIT: "true"
  #
  # Set COMMON_NAMESPACE to combine apps into one namespace.
  # COMMON_NAMESPACE: ""
  #
  # Deploy "development" overlay to a common namespace (the default is to deploy development branches to branch name namespaces)
  # COMMON_NAMESPACE_OVERRIDE: "true"
  #
  # Set SKIP_BUILD to skip the build stage and deploy the latest image
  # SKIP_BUILD: "true"
  #
  PIPELINE_DEBUG: "true"
#
#
#
## ---------- It's generally bad to change anything below here ----------
#
#
#
## Include common scripts
include:
  - project: deployments/ci-config
    file:
      # - project-init.yml
      - get-info-new.yml
      - build-new.yml
      - deploy-new.yml
      - rules.yml
      - ".common-utilities-new.yml"
      - ".vault.yml"
      - ".source-utilities.yml"
  # - template: Jobs/Secret-Detection.gitlab-ci.yml
  # - template: Jobs/SAST.gitlab-ci.yml

## Specify which runner should pick up pipeline jobs
default:
  tags:
    - utility

## Cache jobs based on branch
cache:
  key: $CI_COMMIT_REF_SLUG

## Configure security scanning
# sast:
#   stage: test
#   extends:
#     - ".deploy_stable_rules"

## Configure merge request pipelines
workflow:
  rules:
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == "push"
      when: never
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH || $CI_COMMIT_TAG
