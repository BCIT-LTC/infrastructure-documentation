name: Docker Image CI for GHCR

on:
  push:

permissions:
  contents: read # for checkout

jobs:
  determine-version:
    name: Determine Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.VERSION_NUM }}
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
      - run: npm init -y
      - run: npm install --save-dev semantic-release @semantic-release/exec 
      - name: Verify the integrity of provenance attestations and registry signatures for installed dependencies
        run: npm audit signatures
      - name: semantic release config
        run: |
          echo "Configuring local \".releaserc\" file..."
          echo '{
            "branches": [
              "main"
            ],
            "plugins": [
              "@semantic-release/commit-analyzer",
              "@semantic-release/release-notes-generator",
              [
                "@semantic-release/exec",
                {
                  "verifyReleaseCmd": "echo ${nextRelease.version} > NEXT_VERSION"
                }
              ],
              "@semantic-release/github"
            ]
          }' \
            > .releaserc

          echo "  Done."
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GA_TOKEN }}
        run: npx semantic-release 
      - name: Set the version
        id: set-version
        run: echo $(cat NEXT_VERSION) >> $GITHUB_OUTPUT
      - name: verify the version
        run: |
          if [ -z "${{ steps.set-version.outputs.VERSION_NUM }}" ]; then
            echo "No version found, cancelling job."
            exit 1
          fi

          
        ## This is the step that determines the environment
        ## conditionally chooses latest, stable or review based on branch and commit
  determine-environment:
    name: Determine Environment
    needs: [determine-version]
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-environment.outputs.ENVIRONMENT }}
    steps:
      - uses: actions/checkout@v4
      - name: Set the environment
        id: set-environment
        run: echo "ENVIRONMENT=latest" >> $GITHUB_OUTPUT
      - name: print the environment
        run: echo "The environment is ${{ steps.set-environment.outputs.ENVIRONMENT }}"


  build-for-environment:
    name: Build
    needs: [determine-version, determine-environment]
    runs-on: ubuntu-latest
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
      - name: Print build environment
        run: echo "This is the ${{ needs.determine-environment.outputs.environment }} environment"
      - name: Print gathered version
        run: echo "The version is ${{ needs.determine-version.outputs.version }}"

